on:
  push:
    tags:
      - 'v[0-9]+'

name: Create Release

jobs:
  create_release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        # run: echo "VERSION=${{GITHUB_REF/refs\/tags\//}}" >> $GITHUB_STATE

      - name: Create Release Branch
        run: |
          git checkout -b release-${{ steps.get_version.outputs.VERSION }}
          git merge ${{ github.ref_name }}
          git checkout master
          git merge release-${{ steps.get_version.outputs.VERSION }}
          git push origin master

      # - name: Push the branch 
      #   env:
      #     GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
      #     GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
      #   run: |
      #     git config user.name "${GIT_USER_NAME}"
      #     git config user.email "${GIT_USER_EMAIL}"
      #     git push https://ilyamolokov:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/ilyamolokovOrganization/ci-task.git release-${{ steps.get_version.outputs.VERSION }}

      # - name: Generate changelog
      #   uses: scottbrenner/generate-changelog-action@master
      #   id: changelog
      #   with:
      #     from-tag: 'last tag'
      #     to-tag: 'current tag'
      #     run: |
      #       LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
      #       CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
      #       echo ::set-output name=changelog::$CHANGELOG

      # - name: Get previous tag
      #   id: previous_tag
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       const tags = await github.repos.listTags({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #       });
      #       const currentTag = tags.data.find((tag) => tag.name === context.ref.replace('refs/tags/', ''));
      #       const previous_Tag = tags.data[tags.data.indexOf(currentTag) + 1];
      #       return previous_Tag.name ?? tags.data[tags.data.indexOf(currentTag)];
      - name: Get previous tag
        id: previoustag
        run: |
          echo "::set-output name=tag::$(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1`)"
        shell: bash

      - name: Print previous tag
        run: |
          echo "The previous tag was ${{ steps.previoustag.outputs.tag }}"

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          fromTag: ${{ github.ref_name }}
          toTag: ${{ steps.previous_tag.outputs.result }}
          writeToFile: false

      - name: Find Release Issue
        id: find_issue
        run: |
          ISSUE_NUMBER=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues?labels=RELEASE" | \
            jq -r ".[] | select(.title == \"Release ${{ steps.get_version.outputs.VERSION }}\") | .number")
          echo ::set-output name=issue_number::$ISSUE_NUMBER
        shell: bash

      # - name: Update Release Issue
      #   if: steps.find_issue.outputs.issue_number
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: PATCH /repos/{owner}/{repo}/issues/{issue_number}
      #     title: 'Release ${{ steps.get_version.outputs.VERSION }}'
      #     body: | 
      #       Author: ${{ github.actor }}
      #       Date: ${{ github.event.commits[0].timestamp }}
      #       Version: ${{ steps.get_version.outputs.VERSION }}
      #       Changelog: ${{ steps.changelog.outputs.changes }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        if: steps.find_issue.outputs.issue_number == ''
        uses: actions/create-release@latest
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: 'Release ${{ steps.get_version.outputs.VERSION }}'
          body: | 
            Author: ${{ github.actor }}
            Date: ${{ github.event.commits[0].timestamp }}
            Version: ${{ steps.get_version.outputs.VERSION }}
            Changelog: ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false
          labels: RELEASE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release version Issue
        uses: imjohnbo/issue-bot@3d96848fb5e9a4a473bb81ae62b4b4866a56e93a
        with:
          labels: "RELEASE, ${{ steps.get_version.outputs.VERSION }}"
          title: 'RELEASE ${{ steps.get_version.outputs.VERSION }}'
          body: |
            Author: ${{ github.actor }}
            Date: ${{ github.event.commits[0].timestamp }}
            Version: ${{ steps.get_version.outputs.VERSION }}
            Changelog: ${{ steps.changelog.outputs.changes }}
          pinned: false
          close-previous: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Issue
        uses: actions/stale@v8
        with:
          close-issue-message: 'This issue was closed.'
          stale-issue-label: "wontfix"
          days-before-stale: 0
          days-before-close: 0

  # run_tests:
  #   needs: create_release
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Run tests ${{ matrix.node-version }}
  #       uses: actions/setup-node@v2 
  #       with:
  #         node-version: ${{ matrix.node-version }}

  #     - name: Install commitlint
  #       run: |
  #         npm install conventional-changelog-conventionalcommits
  #         npm install commitlint@latest

  #     - name: Validate current commit (last commit) with commitlint
  #       if: github.event_name == 'push'
  #       run: npx commitlint --from HEAD~1 --to HEAD --verbose

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install playwright
  #       run: npx playwright install --with-deps chromium

  #     - name: Run Unit test
  #       run: npm run test

  #     - name: Run e2e test
  #       run: npm run e2e

  #     - name: Run test-ci
  #       run: npm run test-ci

  #     - name: Run build
  #       run: npm run build --if-present

